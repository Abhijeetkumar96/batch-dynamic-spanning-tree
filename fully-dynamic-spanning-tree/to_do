auto stop = std::chrono::high_resolution_clock::now();
auto duration = std::chrono::duration<double, std::milli>(stop - start).count();

add_function_time("update datastr", duration);

To do (May 31):
  1. SG_PR_PR for deletion - done.
  2. SG_PR_PR for insertion - done.
  3. HS_ET_PR for deletion - done.
  4. HS_ET_PR for insertion - done.
  5. Run PR_RST min-max - done.
  6. Write code for behaviourial analysis.

Possible BUG:
build/dynamic_spanning_tree -i datasets/connected_datasets/myforestfiregraph.txt -b datasets/delete_batch/myforestfiregraph.txt -r HS -p PR

TO_DO:
  1. Integrate the new list ranking code to single component eulerian Tour
  2. 


- We need to sort the input to the eulerian Tour, becoz after creating the new edgelist after updating the edges as per the mapping array, they no longer may be sorted.

for e.g.
rep_map array: [0, 8, 10, 13, 15]

(3,15)  <- (0, 4) as rep[3] = 0, rep[15] = 15, 15 maps to 4.
(7, 16) <- (0, 1) as rep[7] = 0, rep[16] =  8, 8 maps as 1

Therefore, the actual edgelist that goes as input to euler becomes:
(0,4)
(0,1)

- So sorting is needed for eulerianTour.

- To hooking - shortcutting, the input is all edges even for insertion?
Why? I dont need to give all edges as input, rather only the new batch of edges for insertion.
is this optimization possible? - yes, done

To find loc:
find . \( -name '*.cpp' -o -name '*.cu' -o -name '*.cuh' -o -name '*.hpp' -o -name '*.sh' \) | xargs wc -l